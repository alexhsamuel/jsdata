(function () {
  const _ = require('underscore')
  const _now = require('performance-now')

  const MSEC = 1E-3
  const now = () => _now() * MSEC

  /**
   * Times invocation of zero-argument `fn`.
   *
   * @return
   *   An array of the runtime in sec and the return value.
   */
  function time(fn, count=1) {
    const start = now()
    for (let i = 0; i < count; ++i) fn()
    const end = now()
    return end - start
  }

  function estimateTime(fn, minTime=MSEC) {
    for (let count = 1;; count *= 10) {
      const elapsed = time(fn, count)
      if (elapsed > minTime) return elapsed / count
    }
  }

  function rawTimer({target=1, trials=8}={}) {
    return function (fn, ...args) {
      const call = () => fn(...args)

      const estimate = estimateTime(call)
      const count = Math.max(1, Math.round(target / trials / estimate))

      return _(trials).times(() => time(call, count) / count)
    }
  }

  function formatTime(time) {
    let res = 
        time < 500E-9 ? (time / 1E-9).toFixed(1) + ' ns'
      : time < 500E-6 ? (time / 1E-6).toFixed(1) + ' Âµs'
      : time < 500E-3 ? (time / 1E-3).toFixed(1) + ' ms'
      : time.toFixed(2) + ' s'
    return ('     ' + res).slice(-8)
  }

  class TimerStats {
    constructor(fn, args, times, percentile) {
      const sorted = times.sort()
      const getPct = p => sorted[Math.round(sorted.length * p)]

      this.trials = sorted.length
      this.time = getPct(percentile)
      this.size = args.length > 0 ? args[0].length : 0
      this.totalSize = args.reduce((s, a) => s + (a.length || 0), 0)
      this.function = fn.name
    }

    toString() {
      return formatTime(this.time) 
        + ' = ' + (this.size / this.time).toFixed(0) 
        + ' /sec in ' + this.trials + ' trials'
    }

  }

  function timer(timerArgs={}) {
    const rawTimer = this.rawTimer(timerArgs)
    const {percentile=0.10} = timerArgs

    return function (fn, ...args) {
      const times = rawTimer(fn, ...args)
      return new TimerStats(fn, args, times, percentile)
    }
  }

  module.exports = {
    MSEC: 1E-3,
    USEC: 1E-6,
    NSEC: 1E-9,
    
    timer: timer,
    rawTimer: rawTimer,
    now: now,
    time: time,
  }

}).call(this)


