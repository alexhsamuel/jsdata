(function () {
  const assert = require('assert')

  function maxStringLength(arr) {
    let max = 0
    for (let i = 0; i < arr.length; ++i) {
      const len = (arr[i] || '').toString().length
      if (len > max) max = len
    }
    return max
  }

  module.exports = {
    pad(string, width, pad=' ', position=1) {
      string = string || ''
      assert(0 <= position && position <= 1)
      if (string.length < width) {
        const total = width - string.length
        const left = Math.round((1 - position) * total)
        return pad.repeat(left) + string + pad.repeat(total - left)
      }
      else return string
    },

    elide(string, width, ellipsis='\u2026', position=1) {
      const len = string.length
      if (len <= width) return string
      else {
        const keep = width - ellipsis.length
        const left = Math.round(position * keep)
        return string.slice(0, left) + ellipsis + string.slice(len - keep + left)
      }
    },

    palide(string, width, ellipsis='\u2026', pad=' ', elidePosition=1, padPosition=1) {
      string = string || ''
      return (
          string.length < width ? this.pad(string, width, pad, padPosition)
        : string.length > width ? this.elide(string, width, ellipsis, elidePosition)
        : string
      )
    },

    formatter(width, precision=null) {
      const pad = ' '.repeat(width)
      const len = precision === null ? width : width + precision + 1
      const fmt = num => {
        if (Number.isFinite(num)) {
          if (precision !== null)
            num = num.toFixed(precision)
          return (pad + num).slice(-len)
        }
        else if (num) {
          const ret = num.toString()
          return ret + ' '.repeat(Math.max(0, len - ret.length))
        }
        else
          return ' '.repeat(len)
      }
      fmt.width = len
      return fmt
    },

    guess(arr) {
      const formatter = module.exports.formatter
      // FIXME: Do better.  Or move to fixfmt.
      if      (arr instanceof Uint8Array)   return formatter( 3)
      else if (arr instanceof Int8Array)    return formatter( 4)
      else if (arr instanceof Uint16Array)  return formatter( 5)
      else if (arr instanceof Int16Array)   return formatter( 6)
      else if (arr instanceof Uint32Array)  return formatter(10)
      else if (arr instanceof Int32Array)   return formatter(11)
      else if (arr instanceof Float32Array) return formatter( 6, 6)
      else if (arr instanceof Float64Array) return formatter( 6, 6)
      else return formatter(maxStringLength(arr))
    },

  }

}).call(this)
