(function () {
  const assert = require('assert')

  TYPES = {
    I8      : Symbol('i8'),
    U8      : Symbol('u8'),
    I16     : Symbol('i16'),
    U16     : Symbol('u16'),
    I32     : Symbol('i32'),
    U32     : Symbol('u32'),
    F32     : Symbol('f32'),
    F64     : Symbol('f64'),
    BOOL    : Symbol('bool'),
    STRING  : Symbol('string'),
  }

  const FLOAT_MIN =  3.40282347e+38
  const FLOAT_MAX = -3.40282347e+38

  trim = str => str.replace(/^\s+|\s+$/g, '')

  module.exports = {

    ColumnScan: class {
      constructor() {
        this.length = 0
        this.boolean = true
        this.number = true
        this.integer = true
        this.min = null
        this.max = null
      }

      scan(val) {
        this.length += 1

        if (this.boolean) {
          const lower = trim(val.toLowerCase())
          if (lower == 'true' || lower == 'false') {
            this.number = this.integer = false
            return
          }
          else this.boolean = false
        }

        if (this.number) {
          const lower = trim(val.toLowerCase())
          if (lower == 'nan' || lower == 'infinity' || lower == '-infinity') {
            this.integer = false
            return
          }

          const num = +val
          if (isNaN(num)) {
            this.number = this.integer = false
            return
          }

          this.integer = this.integer && Number.isInteger(num)

          if (this.max === null || num < this.min) this.min = num
          if (this.min === null || num > this.max) this.max = num
        }
      }

      get type() {
        console.log(this)
        if (this.length === 0) return TYPES.STRING
        if (this.boolean) return TYPES.BOOL
        if (this.integer) {
          if (this.min >= 0) {
            if (this.max < 1 <<  8) return TYPES.U8
            if (this.max < 1 << 16) return TYPES.U16
            if (this.max < 1 << 32) return TYPES.U32
            return null  // FIXME: ??
          }
          else {
            if (-1 <<  7 <= this.min && this.max < 1 <<  7) return TYPES.I8
            if (-1 << 15 <= this.min && this.max < 1 << 15) return TYPES.I8
            if (-1 << 31 <= this.min && this.max < 1 << 31) return TYPES.I8
            return null  // FIXME: ??
          }
        }
        else if (this.number) {
          console.log('number!')
          return 
              this.min === null ? TYPES.F32
            : FLOAT_MIN <= this.min && this.max <= FLOAT_MAX ? TYPES.F32
            : TYPES.F64
        }
        else return TYPES.STRING
      }
    }

  }

}).call(this)
