(function () {

  const _ = require('underscore')
  const fastCsv = require('fast-csv')
  const data = require('data/data')
  const fs = require('fs')
  const io = require('data/io')

  function open(filename) {
    return fs.createReadStream(filename)
  }

  function scan(input) {
    return new Promise((resolve, reject) => {
      let headers = null
      let rows = 0
      const scanners = []

      input.pipe(fastCsv())
        .on('data', parts => {
          if (headers === null) headers = parts
          else {
            const len = parts.length
            while (scanners.length < len)
              scanners.push(new io.ColumnScan())
            for (let i = 0; i < len; ++i)
              scanners[i].scan(parts[i])
            ++rows
          }
        })
        .on('end', () => {
          const cols = _.zip(headers, scanners).map(
            ([name, s]) => ({name, type: s.type}))
          resolve({cols, rows})
        })
    })
  }

  function readData(input, csv) {
    return new Promise((resolve, reject) => {
      const cols = csv.cols.length

      let row = 0
      input.pipe(fastCsv())
        .on('data', parts => {
          if (row > 0)
            for (let i = 0; i < cols; ++i)
              csv.arrs[i][row - 1] = parts[i]
          ++row
        })
        .on('end', () => {
          resolve(csv)
        })
    })
  }

  module.exports = {
    read(filename) {
      return scan(open(filename)).then(csv => {
        csv.arrs = csv.cols.map(c => io.newArray(c.type, csv.rows))
        return readData(open(filename), csv)
      }).then(csv => {
        const labels = new Int32Array(_.range(csv.rows))
        const cols = _.zip(csv.cols.map(_ => _.name), csv.arrs)
        return new data.Table(new data.Key(labels), cols)
      }).catch(e => console.log(e))
    },

  }

}).call(this)
